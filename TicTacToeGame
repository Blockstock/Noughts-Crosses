from IPython.display import clear_output

#displays board 

def display_board(board):
    clear_output()
    
## Note: Python 2 users, use raw_input() to get player input. Python 3 users, use input()

    print (' _________________')
    print ('|     |     |     |')
    print ('|  ' + board[7] + '  |  ' + board[8] + '  |  ' + board[9] + '  |')
    print ('|_____|_____|_____|')
    print ('|     |     |     |')
    print ('|  ' + board[4] + '  |  ' + board[5] + '  |  ' + board[6] + '  |')
    print ('|_____|_____|_____|')
    print ('|     |     |     |')
    print ('|  ' + board[1] + '  |  ' + board[2] + '  |  ' + board[3] + '  |')
    print ('|_____|_____|_____|')

#decide who goes first
def player_input():
    
    marker = ''
    while not( marker == 'X' or marker == 'O'):
        marker= input('Player 1 would you like to be noughts or crosses? press x or o to choose:').upper() 
        
    if marker == 'X':
        return ('X','O') 
    else:
        return ('O','X')
    
#player inputs a nuber 1-9, if player X is playing change the element of the list to an X, if O change to O
def place_marker(board, marker, position):
        board[position] = marker
            
#check for victory condition, returns true if it is
def win_check(board,mark):
    
    return ((board[7] == mark and board[8] == mark and board[9] == mark) or # across the top
    (board[4] == mark and board[5] == mark and board[6] == mark) or # across the middle
    (board[1] == mark and board[2] == mark and board[3] == mark) or # across the bottom
    (board[7] == mark and board[4] == mark and board[1] == mark) or # down the middle
    (board[8] == mark and board[5] == mark and board[2] == mark) or # down the middle
    (board[9] == mark and board[6] == mark and board[3] == mark) or # down the right side
    (board[7] == mark and board[5] == mark and board[3] == mark) or # diagonal
    (board[9] == mark and board[5] == mark and board[1] == mark)) # diagonal

#randomly decide which player goes first    
import random
def choose_first():
    if random.randint(0, 1)==0:
        return 'Player 2'
    else:
        return 'Player 1'

#check if position is taken
def space_check(board, position):
    return board[position]== ' '
    
#check if board is full, returns true if it is
def full_board_check(board):
    for i in range(1,10,1):
        if space_check(board, i):
            return False
    return True

#takes players choice of square and checks if square is available for use by player
#if it is places players marker there
def player_choice(board, turn):
    position = ' '
    while position not in ['1','2','3','4','5','6','7','8','9'] or not space_check(board,int(position)):
        position=input( turn + ' choose your next position (1-9):')
    return int(position)
    
    
    
#check to see if players want to play again 
def replay():    
    rematch= input('Would you like to play again? yes/no: ').lower.s

#plays the game


print('Welcome to Tic Tac Toe!')

while True:
    
    # Set the game up here
    # pass

    
    board = [' ']*10
    player1, player2 = player_input() 
    turn = choose_first()
    print (turn + ' goes first')
    game_on = True
    while game_on:
       
        #Player 1 Turn
        if turn == 'Player 1':
            display_board(board)
            position = player_choice(board, turn)
            place_marker(board, player1, position)
            
            if win_check(board, player1):
                display_board(board)
                print ('Congratulations! The winner is ' + turn)
                game_on = False
                
            elif full_board_check(board):
                display_board(board)
                print('Unfortunately it was a tie!')
                break
            
            else:
                turn = 'Player 2'
                    
                    
        else:
            display_board(board)
            position = player_choice(board, turn)
            place_marker(board, player2, position)
            
            if win_check(board, player2):
                display_board(board)
                print ('Congratulations! The winner is ' + turn)
                game_on = False
                
            elif full_board_check(board):
                display_board(board)
                print('Unfortunately it was a tie!')
                break
            
            else:
                turn = 'Player 1'      
    
    
    if not replay():
        print ('Hope you enjoyed playing!')
break
